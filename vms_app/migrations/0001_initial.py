# Generated by Django 5.1.5 on 2025-05-13 14:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscompany', models.BooleanField(default=True)),
                ('clientname', models.CharField(max_length=70)),
                ('vat', models.CharField(max_length=8)),
                ('brn', models.CharField(max_length=9)),
                ('nic', models.CharField(blank=True, max_length=14, null=True)),
                ('email', models.EmailField(max_length=50)),
                ('contact', models.CharField(max_length=70)),
                ('logo', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'ordering': ['clientname'],
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=70)),
                ('prefix', models.CharField(blank=True, max_length=3, null=True)),
                ('company_logo', models.BinaryField(blank=True, null=True)),
                ('vat', models.CharField(blank=True, max_length=8, null=True)),
                ('brn', models.CharField(blank=True, max_length=9, null=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('tel', models.CharField(blank=True, max_length=8, null=True)),
            ],
            options={
                'ordering': ['company_name'],
            },
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucher_ref', models.TextField(blank=True, null=True, unique=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('date_time_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('extention_date', models.DateField(blank=True, null=True)),
                ('voucher_status', models.CharField(choices=[('provisional', 'Provisional'), ('issued', 'Issued'), ('expired', 'Expired'), ('redeemed', 'Redeemed'), ('cancelled', 'Cancelled')], default='provisional', max_length=20)),
            ],
            options={
                'ordering': ['voucher_ref'],
                'permissions': [('redeem_voucher', 'Can redeem voucher')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='vms_app.company')),
            ],
            options={
                'ordering': ['username', 'email'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('table_name', models.CharField(blank=True, max_length=20, null=True)),
                ('object_id', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('action', models.CharField(blank=True, choices=[('add', 'Add'), ('update', 'Update'), ('delete', 'Delete')], max_length=10, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_trails', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['datetime'],
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100)),
                ('address', models.CharField(blank=True, max_length=150, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shops', to='vms_app.company')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Redemption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redemption_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('till_no', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_redemptions', to=settings.AUTH_USER_MODEL)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_redemptions', to='vms_app.shop')),
                ('voucher', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='redemption', to='vms_app.voucher')),
            ],
        ),
        migrations.CreateModel(
            name='VoucherRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_ref', models.TextField(blank=True, null=True, unique=True)),
                ('date_time_recorded', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('quantity_of_vouchers', models.IntegerField(default=1)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('request_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('date_time_approved', models.DateTimeField(blank=True, null=True)),
                ('request_doc_pdf', models.FileField(blank=True, help_text='PDF of email received from the initiating client', null=True, upload_to='voucher_requests/doc/')),
                ('pop_doc_pdf', models.FileField(blank=True, help_text='PDF of PoP received from the client', null=True, upload_to='voucher_requests/pop/')),
                ('payment_remarks', models.TextField(blank=True, null=True)),
                ('date_time_paid', models.DateTimeField(blank=True, null=True)),
                ('validity_periode', models.IntegerField(blank=True, default=1, help_text='Validity period in months from the date of approval (1 to 12 months)', null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='approved_requests', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_voucher_requests', to='vms_app.client')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voucher_requests', to='vms_app.company')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_voucher_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['request_ref'],
                'permissions': [('reject_request', 'Can reject a voucher request'), ('approve_request', 'Can approve a voucher request'), ('change_to_paid', 'Can change the request_status from pending to paid')],
            },
        ),
        migrations.AddField(
            model_name='voucher',
            name='voucher_request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='vms_app.voucherrequest'),
        ),
    ]
